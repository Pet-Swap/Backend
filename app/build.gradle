/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.3.3'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
    // For generate doc
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.asciidoctor.jvm.pdf' version '4.0.2'

    id("io.freefair.lombok") version "8.12.2"
}

asciidoctor {
    sourceDir = file('src/docs/asciidoc')
    outputDir = file("${buildDir}/docs/asciidoc")
}

asciidoctorPdf {
    sourceDir = file('src/docs/asciidoc')
    outputDir = file("${buildDir}/docs/asciidoc")
}

asciidoctorj {
    requires 'rouge'
    modules {
        diagram.use()
        diagram.version '1.5.16'
    }
    attributes 'build-gradle': file('build.gradle'),
            'sourcedir': project.sourceSets.main.java.srcDirs[0],
            'source-highlighter': 'rouge',
            'rouge-style': 'github',
            'rouge-theme': 'github'
}

sonar {
    properties {
        property "sonar.projectKey" , "Pet-Swap_Backend"
        property "sonar.organization" , "pet-swap"
        property "sonar.host.url" , "https://sonarcloud.io"
    }
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

test {
    finalizedBy jacocoTestReport
}

dependencies {
    // Web app
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '3.4.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '3.4.2'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.36'

    // Database
    implementation group: 'org.springframework.data', name: 'spring-data-jpa', version: '3.4.3'
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '3.4.2'


    // Security
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '3.4.2'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.4.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Open API
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // Use JUnit test framework.
    testImplementation libs.junit
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.3'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group = "fr.parisnanterre.petswap" // Group ID
version = "0.0.1" // Version

application {
    // Define the main class for the application.
    mainClass = 'fr.parisnanterre.petswap.backend.App'
}
/*
// Edit the build task to generate the asciidoc pdf too
tasks.named('asciidoctor').configure {
    dependsOn tasks.named('asciidoctorPdf')
}
tasks.named('build').configure {
    dependsOn tasks.named('asciidoctor')
}*/