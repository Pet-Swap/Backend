name: CI - Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: petswap_db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Run tests
      run: ./mvnw test
      env:
        # Variables d'environnement pour les tests d'intégration uniquement si nécessaire
        # Les tests unitaires utiliseront H2 via application-test.yaml
        SPRING_PROFILES_ACTIVE: test

    - name: Build application
      run: ./mvnw clean compile

    - name: Generate documentation
      run: ./mvnw asciidoctor:process-asciidoc

    - name: List test report files (debug)
      run: |
        echo "Checking if surefire-reports directory exists:"
        ls -la target/ || true
        echo "Contents of surefire-reports directory:"
        ls -la target/surefire-reports/ || true
        echo "XML files in surefire-reports:"
        find target/surefire-reports/ -name "*.xml" || true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation
        path: target/generated-docs/

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()  # Toujours exécuter même si les tests échouent
      with:
        name: Maven Tests
        path: 'target/surefire-reports/TEST-*.xml'  # Pattern plus spécifique
        reporter: java-junit
        fail-on-error: false  # Ne pas faire échouer la CI si le rapport ne peut pas être généré
        fail-on-empty: false  # Ne pas échouer si aucun fichier n'est trouvé
